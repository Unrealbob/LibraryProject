package com.library.test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;

import org.junit.Test;

import com.library.Pass;
import com.library.lending.LendingInformation;
import com.library.lending.LendingObject;
import com.library.object.Book;
import com.library.object.CD;
import com.library.object.Movie;
import com.library.object.MovieGenre;
import com.library.object.MovieType;
import com.library.object.ObjectInformation;
import com.library.object.Title;
import com.library.people.Artist;
import com.library.people.Customer;
import com.library.people.CustomerStatus;
import com.library.people.Sexuality;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'unrea' at '28.10.16 14:46' with Gradle 3.0
 *
 * @author unrea, @date 28.10.16 14:46
 */
public class LibraryTest {
	//	private static final String PERSISTENCE_UNIT_NAME = "derby-embedded-inmemory";

	private static final String PERSISTENCE_UNIT_NAME = "derby-network";

	private static EntityManagerFactory factory;

	final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(LibraryTest.class);

	@org.junit.BeforeClass
	public static void setup() {
		factory = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT_NAME);
		
	}

	@Test
	public void testCD(){
		
		CD cd = new CD();
		cd.setName("TestCD");
		int titlesCount = 13;
		List<CD> cds = new ArrayList<>();
		cds.add(cd);
		List<Artist> artists = new ArrayList<>();
		Artist artist = new Artist();
		artist.setName("TestArtist");
		artists.add(artist);
		List<Title> titles = new ArrayList<>();
		
		EntityManager entityManager = factory.createEntityManager();
		
		try{
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();
			
			try{		
								
				for (int i = 0; i < titlesCount; i++) {
					Title title = new Title();
					title.setName("Title" + i);
					title.setDuration(123);		
					title.setCds(cds);
					title.setArtists(artists);
					
					titles.add(title);
					
					entityManager.persist(title);
				}
				
				cd.setTitles(titles);
				
				entityManager.persist(artist);
				entityManager.persist(cd);
				transaction.commit();
				
			} finally{
				if(transaction.isActive()) transaction.rollback();
			}
			
			CD testCd = entityManager.find(CD.class, cd.getId());
			assertEquals(cd, testCd);
			assertEquals(titlesCount,testCd.getTitles().size());
			
		} finally{
			entityManager.close();
		}
		
	}
	

	@Test
	public void testMovie(){
		Movie movie = new Movie();
		movie.setType(MovieType.FULLHD);
		movie.setName("John Wick");
		movie.setDurationInMin(101);
		movie.setDisks(1);
		movie.setMovieGenre(MovieGenre.ACTION);
		EntityManager entityManager = factory.createEntityManager();
		try{
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();

			try{
				entityManager.persist(movie);
				transaction.commit();
			} finally{
				if(transaction.isActive()) transaction.rollback();
			}
			Movie testMovie = entityManager.find(Movie.class, movie.getId());
			assertEquals(movie, testMovie);
			
			@SuppressWarnings("unchecked")
			List<ObjectInformation> movies = entityManager.createQuery(
					"SELECT c FROM OBJECT_INFORMATION c WHERE c.name LIKE :custName")
				    .setParameter("custName", "John Wick")
				    .setMaxResults(10)
				    .getResultList();
			
			for(ObjectInformation obj : movies){
				System.out.println(obj.getName());
			}
			
			
		} finally{
			entityManager.close();
		}
	}
	
	@Test
	public void testCustomer() {
		Customer customer = new Customer();
		customer.setFirstName("TestCustomer");
		customer.setSex(Sexuality.MALE);
		Pass pass = new Pass();
		pass.setCustomer(customer);
		customer.setPass(pass);
		EntityManager entityManager = factory.createEntityManager();
		
		try{
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();

			try{
				
				entityManager.persist(customer);
				entityManager.persist(pass);
				transaction.commit();
			} finally{
				if(transaction.isActive()) transaction.rollback();
			}
			Customer testCustomer = entityManager.find(Customer.class, customer.getId());
			assertEquals(testCustomer.getFirstName(), testCustomer.getPass().getCustomer().getFirstName());
			assertEquals(customer, testCustomer);
				
		} finally{
			entityManager.close();
		}
		
	}
	
	@Test
	public void testLend() {
		Customer customer = new Customer();
		customer.setFirstName("TestCustomer");
		customer.setSex(Sexuality.FEMALE);
		customer.setStatus(CustomerStatus.ACTIVE);
		
		Pass pass = new Pass();
		pass.setCustomer(customer);
		pass.setValidDate(new GregorianCalendar(2017, 02, 10).getTime());	
		customer.setPass(pass);
		
		Book book = new Book();
		book.setName("TestBook");
		
		LendingInformation lendingInfo = new LendingInformation();
		lendingInfo.setCustomer(customer);
		LendingObject lendingObj = new LendingObject();
		lendingObj.setObject(book);
		lendingInfo.setLendingObjects(lendingObj);
		
		List<LendingInformation> lendingInfoList = new ArrayList<>();
		lendingInfoList.add(lendingInfo);
		
		customer.setLendingInfos(lendingInfoList);
		
		EntityManager entityManager = factory.createEntityManager();
		
		try{
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();

			try{				
				entityManager.persist(customer);
				entityManager.persist(pass);
				entityManager.persist(book);
				entityManager.persist(lendingInfo);
				entityManager.persist(lendingObj);
				transaction.commit();
			} finally{
				if(transaction.isActive()) transaction.rollback();
			}
			Customer testCustomer = entityManager.find(Customer.class, customer.getId());
			Book testBook = entityManager.find(Book.class, book.getId());
			assertEquals(testCustomer.getLendingInfos().get(0).getLendingObjects().getObject().getId(), testBook.getId());
			
				
		} finally{
			entityManager.close();
		}
		
	}
	
	@Test
	public void testPersistAndDeleteBook() {
		Book book = new Book();
		book.setName("TestBook");
		
		EntityManager entityManager = factory.createEntityManager();
		
		try{
			EntityTransaction transaction = entityManager.getTransaction();
			transaction.begin();

			try{
				
				entityManager.persist(book);
				
				Book testBook = entityManager.find(Book.class, book.getId());
				assertEquals(book, testBook);
				
				entityManager.remove(book);
				transaction.commit();
				
				Book testBookDel = entityManager.find(Book.class, book.getId());
				assertEquals(null, testBookDel);
				
			} finally{
				if(transaction.isActive()) transaction.rollback();
			}		
				
		} finally{
			entityManager.close();
		}		
	}
	
	
}
